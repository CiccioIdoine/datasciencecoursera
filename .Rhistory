a <- available.packages()
available.packages()
install.packages("slidify")
install.packages("slidify")
available.packages()
install.packages("slidify")
install.packages("devtools")
library("devtools")
library(devtools)
search()
install.packages("KernSmooth")
library(KernSmooth)
version
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
play()
?vector
nxt()
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?':'
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(0, 10, length = 30)
seq(0, 10, length=30)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "CiccioIdoine")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X", "Y", "Z", sep = ""))
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = ""))
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
play()
y
y
z
nxt()
myData <- sample(c(y, z), 100)
is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
play()
length(x)
next()
nxt()
info()
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
View(myVector)
play()
View(myVector)
nxt()
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, myData)
colnames(myData) <- cnames
myData
info()
exit()
exit
bye()
clear()
ciccio <- if(tilo == 35) {
37
} else if(tilo = 37) {
39
} else {
40
}
ciccio <- if(tilo == 35) {
37
} else if(tilo == 37) {
39
} else {
40
}
tilo <- 20
ciccio <- if(tilo == 35) {
37
} else if(tilo == 37) {
39
} else {
40
}
tilo <- 35
ciccio
ciccio <- if(tilo <- 35) {
37
} else if(tilo <- 37) {
39
} else {
40
}
tilo <- 35
tilo <- 37
ciccio
ciccio <- if(tilo <- 35) {
37
} else if(tilo <- 37) {
39
} else {
40
}
for (i in 1:10){
print(i)
}
for (i in 1:10) {}
for (i in 1:10) {
print(i)
}
new <- matrix(1:6, 2, 3)
View(new)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x)))
print(x([i, j]))
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x([i, j]))
}
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x([i, j])
}
}
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x[i, j])
}
}
for (i in seq_len(nrow(new))) {
for (j in seq_len(ncol(x))){
print(new[i, j])
}
}
for (i in seq_len(nrow(new))) {
for (j in seq_len(ncol(new))){
print(new[i, j])
}
}
^L
^l
^L
count <- 0
while (count < 10) {
print (count)
}
while (count < 10) {
print (count)
count <- count + 1
}
count <- 0
while (count < 10) {
print (count)
count <- count + 1
}
while (count < 10) {
if (count < 5) {
next
}
print (count)
count <- count + 1
}
while (count < 10) {
if (count < 5) {
next
}else{
print (count)
count <- count + 1
}
}
while (count < 10) {
if (count < 5) {
next
}else{
print (count)
count <- count + 1
}
}
count <- 1:10
while (count < 10) {
if (count < 5) {
next
}else{
print (count)
count <- count + 1
}
}
mydata <- rnorm(100)
sd(mydata)
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
sd(mydata, na.rm = FALSE)
?sd
args(sd)
args(lm)
f <- function (a, b=1, c = TRUE){
return (a, b, c)
}
f()
f <- function (a, b=1, c = TRUE){
return (a)
}
f()
f <- function (a, b=1, c = TRUE){
return (a, b, c)
}
f(a = 1)
f <- function (a, b){
a^2
}
f(2)
f(2, 4)
f(b = 2, 4)
f <- function (a, b=1, c = TRUE){
print (a, b, c)
}
f(2)
f(2, 4, 5)
f <- function (a, b=1, c = TRUE){
print (a)
}
f <- function (a, b=1, c = TRUE){
print (a)
print (b)
print (c)
}
f(3)
f(b=3)
?plot
?mean
args(mean)
args(paste)
add2 <- function(x, y){
x + y
}
add2(5, 6)
above10 <- function(x){
use <- x > 10
x[use]
}
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function (x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function (x, n = 10) {
use <- x > n
x[use]
}
above (x)
colmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
colmean(airquality)
colmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rem = removeNA)
}
means
}
colmean(airquality)
colmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colmean(airquality)
install.packages("RMySQL")
ucscDB <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
R.home()
install.packages("RMySQL")
install.packages("RMySQL", type="source")
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type="source")
ucscDB <- dbConnect(MySQL(), user = "genome",
?dbConnect
install.packages("RMySQL", type="source")
Sys.getenv('MYSQL_HOME')
ucscDb <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
data <- read.table(iris)
View(iris)
data <- read.csv(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
datacars <- read.table(mtcars)
View(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls
ls()
debug(ls)
5
ls
ls()
debug(ls)
ls
ls()
?ls
6
dsd
?download.file
getwd()
setwd("/Users/sergio/datasciencecoursera/quiz")
setwd("/Users/sergio/datasciencecoursera")
donload.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv, destfile = "acs.csv", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv, destfile = "acs.csv", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "acs.csv", method = "curl")
